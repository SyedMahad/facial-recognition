import numpy as np
from typing import List


# UserModel will store user name and face encoding (list of 128 values from dlib)
class UserModel:
    """
    The UserModel class represents a user with a name and an associated facial encoding.
    The facial encoding is stored as binary data for efficient storage and can be retrieved 
    as a numpy array for comparison during facial recognition.

    Attributes:
        name (str): The name of the user.
        face_encoding (bytes): The user's face encoding stored as binary data.
    """

    def __init__(self, name: str, face_encoding: List[float]):
        """
        Initialize a UserModel instance with a name and face encoding.

        Args:
            name (str): The name of the user.
            face_encoding (List[float]): The 128-dimensional facial encoding generated by dlib/face_recognition.
        """
        self.name = name
        self.face_encoding = face_encoding

    def set_facial_encoding(self, encoding: List[float]):
        """
        Convert and store the facial encoding as binary data to save memory and make storage efficient.

        Args:
            encoding (List[float]): A list representing the 128-dimensional facial encoding.
        """
        # Convert the list to a numpy array and save it as binary data for more efficient storage
        self.facial_encoding = np.array(encoding, dtype=np.float32).tobytes()

    def get_facial_encoding(self) -> np.ndarray:
        """
        Retrieve the stored facial encoding and convert it back to a numpy array for comparison.

        Returns:
            np.ndarray: A numpy array representing the user's facial encoding, or None if encoding is not available.
        """
        # Convert the binary data back to a numpy array if it exists
        if hasattr(self, 'facial_encoding') and self.facial_encoding:
            return np.frombuffer(self.facial_encoding, dtype=np.float32)
        return None


# In-memory database to store user face encodings (In real-world apps, use a database)
user_db = []